using System;
using System.Collections.Generic;
using System.Linq;
using SystemInterface;
using SystemWrapper;
using Moq;

namespace Habitat.Core.TestingLibrary
{
    /// <summary>
    /// Class used to simulate the system clock so that time-dependent operations can be easily tested
    /// </summary>
    public class MockSystemClockProvider
    {
        private readonly TimeSpan _incrementAmount;
        private readonly List<DateTime> _testDates = new List<DateTime>();
        private Mock<IDateTime> _mockDateProvider;

        /// <summary>
        /// Initializes a new instance of the MockSystemClockProvider class
        /// with the default value of 1 second simulated between accesses.
        /// </summary>
        /// <param name="startingDate">The initial starting date to use when simulating the system clock</param>
        public MockSystemClockProvider(DateTime startingDate)
            : this(startingDate, new TimeSpan(0, 0, 1))
        {
        }

        /// <summary>
        /// Initializes a new instance of the MockSystemClockProvider class.
        /// </summary>
        /// <param name="startingDate">The initial starting date to use when simulating the system clock</param>
        /// <param name="incrementAmount">The amount of time to simulate between accesses to the Now property</param>
        public MockSystemClockProvider(DateTime startingDate, TimeSpan incrementAmount)
        {
            _incrementAmount = incrementAmount;
            _testDates.Add(startingDate);
        }

        /// <summary>
        /// Generates and returns the mock that can be injected into a class under test
        /// </summary>
        public Mock<IDateTime> MockDateProvider
        {
            get
            {
                if (_mockDateProvider == null)
                {
                    _mockDateProvider = CreateMockDateProvider();
                }
                return _mockDateProvider;
            }
        }

        /// <summary>
        /// Returns the date/time stamp that should be generated by the mock after a certain number of accesses of the "system clock"
        /// </summary>
        /// <param name="numberOfAccesses">The number of accesses to the system clock for which to return an expectation</param>
        /// <returns>The expected datetime value</returns>
        public DateTime GetExpectedValueAfter(int numberOfAccesses)
        {
            long startingTicks = _testDates[0].Ticks;
            TimeSpan expectedTime = TimeSpan.FromTicks(startingTicks + (_incrementAmount.Ticks * numberOfAccesses));
            return new DateTime(expectedTime.Ticks);
        }

        /// <summary>
        /// Creates the internal date/time mock
        /// </summary>
        /// <returns>The mock instance</returns>
        private Mock<IDateTime> CreateMockDateProvider()
        {
            var mockDateProvider = new Mock<IDateTime>(MockBehavior.Strict);
            mockDateProvider.SetupGet(x => x.Now).Returns(() =>
            {
                _testDates.Add(_testDates.Last().Add(_incrementAmount));
                return new DateTimeWrap(_testDates.Last());
            });
            return mockDateProvider;
        }

    }
}